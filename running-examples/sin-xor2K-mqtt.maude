*** Dialect with a version of XOR that resues the same key two times
*** Underlying protocol: MQTT

sload ../modf-static
sload ../protocols/mqtt
sload ../lingos/xor-lingo

*** XOR-LINGO
fmod XOR-LINGO-I{D :: TRIV} is
    protecting XOR-LINGO{D} .
endfm

*** View to instantiate XOR over a trivial data type as a lingo
view xor-lingo{D :: TRIV} from PMLINGO to XOR-LINGO-I{D} is
    sort D1 to D$Elt .
    sort D2 to D$Elt .
    sort A to D$Elt .

    op f to _xor_ .
    op g to _xor_ .
    
    *** param is already declared by the lingo

    op ingressArity to term 1 .
    op egressArity to term 1 .
endv

*** Dialect with XOR and MQTT over Byte
omod MAIN-BYTE is
    protecting DIALECT{xor-lingo{Byte}, MqttProtocol{Byte}} * (sort BitVec{8} to Byte) .

    var N : Nat .
    *** Definition of the parameter. Computes a new parameter every two messages.
    eq param(N) = if((N rem 2) == 0) then [random(N) rem (2 ^ 8)] else [s(random(N)) rem (2 ^ 8)] fi .
endom

*** DIALECT(XOR,MQTT) for two clients (c1 & c2) and one broker (b)
frew    newDialect(newMqttClient('c1,'b,subscribe("temp"))) 
        newDialect(newMqttBroker('b)) 
        newDialect(newMqttClient('c2,'b,publish("temp","34"))) .
